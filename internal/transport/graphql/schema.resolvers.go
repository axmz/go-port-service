package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/axmz/go-port-service/internal/transport/graphql/model"
)

// Port is the resolver for the port field.
func (r *queryResolver) Port(ctx context.Context, id string) (*model.Port, error) {
	port, err := r.PortService.GetPortByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return convertToGraphQLPort(port), nil
}

// Ports is the resolver for the ports field.
func (r *queryResolver) Ports(ctx context.Context) ([]*model.Port, error) {
	ports, err := r.PortService.GetAllPorts(ctx)
	if err != nil {
		return nil, err
	}
	var result []*model.Port
	for _, p := range ports {
		result = append(result, convertToGraphQLPort(p))
	}
	return result, nil
}

// PortsCount is the resolver for the portsCount field.
func (r *queryResolver) PortsCount(ctx context.Context) (int32, error) {
	return int32(r.PortService.GetPortsCount(ctx)), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
